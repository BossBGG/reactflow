import { useCallback, useEffect } from "react";
import {
  Background,
  Controls,
  MiniMap,
  ReactFlow,
  addEdge,
  useNodesState,
  useEdgesState,
  type OnConnect,
} from "@xyflow/react";

import "@xyflow/react/dist/style.css";

import { initialNodes, nodeTypes, type DateTimeNode } from "./nodes";
import { initialEdges, edgeTypes } from "./edges";

export default function App() {
  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);
  
  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ edge ‡πÉ‡∏´‡∏°‡πà
  const onConnect: OnConnect = useCallback(
    (connection) => {
      console.log("New connection:", connection);
      setEdges((edges) => addEdge({
        ...connection,
        animated: true,
        style: { stroke: '#6B7280', strokeWidth: 2 }
      }, edges));
    },
    [setEdges]
  );

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó datetime values ‡πÅ‡∏•‡∏∞ connected number-display nodes
  const updateDateTime = useCallback(() => {
    const now = new Date();
    const newDateTimeValue = {
      Year: now.getFullYear(),
      Month: now.getMonth() + 1,
      Day_Month: now.getDate(),
      Hours: now.getHours(),
      Minutes: now.getMinutes(),
      Seconds: now.getSeconds(),
      Day_Week: now.getDay()
    };
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó nodes ‡πÅ‡∏•‡∏∞ edges ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    setNodes((currentNodes) => {
      const currentEdges = edges;
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó datetime node ‡∏Å‡πà‡∏≠‡∏ô
      const updatedNodes = currentNodes.map(node => {
        if (node.type === "datetime") {
          return {
            ...node,
            data: {
              ...node.data,
              value: newDateTimeValue
            }
          };
        }
        return node;
      });
      
      // ‡∏´‡∏≤ datetime node ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó‡πÅ‡∏•‡πâ‡∏ß
      const dateTimeNode = updatedNodes.find(n => n.type === "datetime");
      
      if (!dateTimeNode) return updatedNodes;
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó number-display nodes ‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡∏ö dynamic
      return updatedNodes.map(node => {
        if (node.type === "number-display") {
          const nodeData = node.data as any;
          
          // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö nodes ‡∏ó‡∏µ‡πà‡∏°‡∏µ sourceNodeId ‡πÅ‡∏•‡∏∞ sourceField (‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß)
          if (nodeData.sourceNodeId && nodeData.sourceField && dateTimeNode) {
            const newValue = newDateTimeValue[nodeData.sourceField as keyof typeof newDateTimeValue];
            if (newValue !== undefined) {
              return {
                ...node,
                data: {
                  ...nodeData,
                  value: newValue
                }
              };
            }
          }
          
          // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö nodes ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô edges (‡πÅ‡∏ö‡∏ö dynamic)
          const incomingEdge = currentEdges.find(edge => edge.target === node.id);
          if (incomingEdge && incomingEdge.source === dateTimeNode.id) {
            const sourceHandle = incomingEdge.sourceHandle;
            
            let newValue = nodeData.value;
            let newLabel = nodeData.label;
            
            // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏° sourceHandle
            switch (sourceHandle) {
              case "year":
                newValue = newDateTimeValue.Year;
                newLabel = "Year";
                break;
              case "month":
                newValue = newDateTimeValue.Month;
                newLabel = "Month";
                break;
              case "day_month":
                newValue = newDateTimeValue.Day_Month;
                newLabel = "Day";
                break;
              case "hours":
                newValue = newDateTimeValue.Hours;
                newLabel = "Hours";
                break;
              case "minutes":
                newValue = newDateTimeValue.Minutes;
                newLabel = "Minutes";
                break;
              case "seconds":
                newValue = newDateTimeValue.Seconds;
                newLabel = "Seconds";
                break;
              case "day_week":
                newValue = newDateTimeValue.Day_Week;
                newLabel = "Day Week";
                break;
              default:
                break;
            }
            
            return {
              ...node,
              data: {
                ...nodeData,
                value: newValue,
                label: newLabel,
                sourceNodeId: incomingEdge.source,
                sourceField: sourceHandle
              }
            };
          }
        }
        
        return node;
      });
    });

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó edge labels ‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    setEdges((currentEdges) => {
      return currentEdges.map(edge => {
        if (edge.source === "a") { // DateTime node id
          let newEndLabel = edge.data?.endLabel;
          
          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó endLabel ‡∏ï‡∏≤‡∏° sourceHandle
          switch (edge.sourceHandle) {
            case "year":
              newEndLabel = newDateTimeValue.Year.toString();
              break;
            case "month":
              newEndLabel = newDateTimeValue.Month.toString();
              break;
            case "day_month":
              newEndLabel = newDateTimeValue.Day_Month.toString();
              break;
            case "hours":
              newEndLabel = newDateTimeValue.Hours.toString();
              break;
            case "minutes":
              newEndLabel = newDateTimeValue.Minutes.toString();
              break;
            case "seconds":
              newEndLabel = newDateTimeValue.Seconds.toString();
              break;
            case "day_week":
              newEndLabel = newDateTimeValue.Day_Week.toString();
              break;
            default:
              break;
          }
          
          return {
            ...edge,
            data: {
              ...edge.data,
              endLabel: newEndLabel
            }
          };
        }
        return edge;
      });
    });
  }, [setNodes, setEdges, edges]);

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å updateDateTime ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ component mount ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ bug ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  useEffect(() => {
    updateDateTime();
  }, []);

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó datetime ‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  useEffect(() => {
    const interval = setInterval(updateDateTime, 1000);
    return () => clearInterval(interval);
  }, [updateDateTime]);

  return (
    <div style={{ width: '100vw', height: '100vh' }}>
      <ReactFlow
        nodes={nodes}
        nodeTypes={nodeTypes}
        onNodesChange={onNodesChange}
        edges={edges}
        edgeTypes={edgeTypes}
        onEdgesChange={onEdgesChange}
        onConnect={onConnect}
        fitView
      >
        <Background />
        <MiniMap />
        <Controls />
      </ReactFlow>
      
      {/* ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô */}
      <div className="absolute top-4 left-4 z-10 bg-white p-4 rounded shadow-lg max-w-sm">
        <h3 className="font-bold mb-2">üéØ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:</h3>
        <ol className="text-sm space-y-1">
          <li>1. ‡∏•‡∏≤‡∏Å Handle ‡∏à‡∏≤‡∏Å DateTime Node</li>
          <li>2. ‡πÑ‡∏õ‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡πà Empty Box ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤</li>
          <li>3. Box ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠</li>
          <li>4. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó‡πÅ‡∏ö‡∏ö real-time</li>
        </ol>
        <button
          onClick={updateDateTime}
          className="mt-3 bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600"
        >
          ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏ô‡∏µ‡πâ
        </button>
      </div>
      
      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• edges ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô */}
      <div className="absolute bottom-4 left-4 z-10 bg-white p-3 rounded shadow-lg">
        <h4 className="font-bold text-sm mb-1">üîó ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:</h4>
        <div className="text-xs space-y-1 max-h-32 overflow-y-auto">
          {edges.map(edge => (
            <div key={edge.id} className="text-gray-600">
              {edge.source}({edge.sourceHandle}) ‚Üí {edge.target}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}